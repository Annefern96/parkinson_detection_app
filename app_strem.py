# -*- coding: utf-8 -*-
"""App_strem.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1h8X_K_SmWHE8GCD6D-vUCYR_s_WwoSWS
"""

# Parkinson's Prediction App with Navigation, SHAP, User Login, Patient ID Display, and Logout + Input Logging

import streamlit as st
import pandas as pd
import numpy as np
import pickle
import xgboost as xgb
import matplotlib.pyplot as plt
import shap
import os
from datetime import datetime

# Load model and scaler
try:
    with open("model/xgb_model.pkl", "rb") as f:
        model = pickle.load(f)
    with open("model/scaler.pkl", "rb") as f:
        scaler = pickle.load(f)
except FileNotFoundError:
    st.error("Model or scaler file not found. Please ensure both are in the 'model/' folder.")
    st.stop()

# Feature list
FEATURES = [
    "MDVP:Fo(Hz)", "MDVP:Fhi(Hz)", "MDVP:Flo(Hz)",
    "MDVP:Jitter(%)", "MDVP:Jitter(Abs)", "MDVP:RAP", "MDVP:PPQ",
    "Jitter:DDP", "MDVP:Shimmer", "MDVP:Shimmer(dB)", "Shimmer:APQ3",
    "Shimmer:APQ5", "MDVP:APQ", "Shimmer:DDA", "NHR", "HNR",
    "RPDE", "DFA", "spread1", "spread2", "D2", "PPE"
]

# Sidebar Navigation
st.sidebar.title("üß≠ Navigation")
page = st.sidebar.radio("Go to", ["üè† Welcome", "üîê Login", "üìä Predictor", "‚ÑπÔ∏è About"])

if "user_id" not in st.session_state:
    st.session_state.user_id = ""

# Logout button
if st.session_state.user_id:
    if st.sidebar.button("üö™ Logout"):
        st.session_state.user_id = ""
        st.success("Logged out successfully. Please log in again to continue.")

if page == "üè† Welcome":
    st.title("üéô Parkinson's Voice-Based Risk Predictor")
    st.markdown("""
    Welcome to the Parkinson's Detection App!

    This tool uses a machine learning model trained on 22 voice biomarkers to help assess the likelihood of Parkinson‚Äôs disease.

    - You can input values manually or upload a CSV.
    - You‚Äôll get a prediction and optional explanation.

    This is intended for **educational purposes only**.
    """)
    if st.button("Go to Login"):
        st.success("Please use the sidebar to access the Login page.")

elif page == "üîê Login":
    st.title("üîê User Login")
    user_id = st.text_input("Enter Patient ID:", value=st.session_state.user_id)
    if st.button("Confirm ID"):
        if user_id.strip() == "":
            st.warning("Please enter a valid patient ID.")
        else:
            st.session_state.user_id = user_id.strip()
            st.success(f"Welcome, {user_id}!")
            st.write("Use the sidebar to go to the predictor.")

elif page == "üìä Predictor":
    if st.session_state.user_id == "":
        st.warning("Please log in first via the 'Login' page.")
        st.stop()

    st.title("üìä Parkinson's Structured Data Predictor")
    st.markdown(f"**Current Patient ID:** `{st.session_state.user_id}`")
    st.write("Upload a CSV or enter acoustic biomarker values manually to predict Parkinson's disease.")

    input_df = pd.DataFrame()
    tab1, tab2 = st.tabs(["üì• Input Data", "üìà Prediction & Results"])

    with tab1:
        option = st.radio("How would you like to provide input?", ["Manual Entry", "Upload CSV"])

        if option == "Manual Entry":
            st.subheader("Manually Enter Feature Values")
            user_input = {feat: st.number_input(feat, value=0.0, format="%.6f") for feat in FEATURES}
            input_df = pd.DataFrame([user_input])

        elif option == "Upload CSV":
            uploaded_file = st.file_uploader("Upload CSV with the same 22 features", type=["csv"])
            if uploaded_file:
                try:
                    input_df = pd.read_csv(uploaded_file)
                    if not all(feat in input_df.columns for feat in FEATURES):
                        st.error("Uploaded CSV does not contain all required features.")
                        input_df = pd.DataFrame()
                    else:
                        st.write("‚úÖ Preview of uploaded data:")
                        st.dataframe(input_df)
                except Exception as e:
                    st.error(f"Error reading CSV: {e}")
                    input_df = pd.DataFrame()

    with tab2:
        if not input_df.empty and len(input_df.columns) == len(FEATURES):
            st.subheader("ü§ñ Model Prediction")
            try:
                input_scaled = scaler.transform(input_df)
                prediction = model.predict(input_scaled)
                proba = model.predict_proba(input_scaled)[:, 1]

                results = []
                for i in range(len(prediction)):
                    label = "üß† Parkinson's detected" if prediction[i] == 1 else "‚úÖ No Parkinson's"
                    conf = f"{proba[i]*100:.2f}%"
                    st.markdown(f"**Sample {i+1}:** {label}")
                    st.markdown(f"Confidence: **{conf}**")
                    row_result = input_df.iloc[i].copy()
                    row_result['prediction'] = label
                    row_result['confidence'] = conf
                    row_result['sample'] = i + 1
                    results.append(row_result)

                # Save input and output combined
                now = datetime.now().strftime("%Y%m%d_%H%M%S")
                full_results_df = pd.DataFrame(results)
                os.makedirs("logs", exist_ok=True)
                full_results_df.to_csv(f"logs/{st.session_state.user_id}_{now}.csv", index=False)

                if st.checkbox("üîç Show Interpretability (SHAP)"):
                    explainer = shap.TreeExplainer(model)
                    shap_values = explainer.shap_values(input_scaled)
                    plt.title("Mean absolute SHAP value (feature importance)")
                    shap.plots.bar(shap.Explanation(
                        values=shap_values,
                        base_values=explainer.expected_value,
                        data=input_df,
                        feature_names=input_df.columns
                    ))
                    st.pyplot(bbox_inches='tight')

            except Exception as e:
                st.error(f"Error during prediction: {e}")

elif page == "‚ÑπÔ∏è About":
    st.title("‚ÑπÔ∏è About This App")
    st.markdown("""
    **Purpose:**
    This application demonstrates the use of machine learning in voice-based Parkinson‚Äôs disease screening.

    **Model:**
    Trained using the UCI Parkinson‚Äôs dataset with 22 voice-related features.

    **Disclaimer:**
    This app is **not a medical device** and does not provide clinical diagnosis. It is built for educational use.

    **Credits:**
    Developed as part of a student AI project.
    """)

st.markdown("---")
st.caption("¬© 2025 ‚Äì Educational app built with Streamlit")